trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - 'v*'

strategy:
  matrix:
    MacOs CPython3.5:
      image: 'macos-latest'
      python.version: '3.5'
      python.architecture: 'x64'
    MacOs CPython3.6:
      image: 'macos-latest'
      python.version: '3.6'
      python.architecture: 'x64'
    MacOs CPython3.7:
      image: 'macos-latest'
      python.version: '3.7'
      python.architecture: 'x64'
    MacOs CPython3.8:
      image: 'macos-latest'
      python.version: '3.8'
      python.architecture: 'x64'
    MacOs CPython3.9:
      image: 'macos-latest'
      python.version: '3.9'
      python.architecture: 'x64'
    MacOs PyPy3:
      image: 'macos-latest'
      python.version: 'pypy3'
      python.architecture: 'x64'
    Ubuntu CPython3.5:
      image: 'ubuntu-latest'
      python.version: '3.5'
      python.architecture: 'x64'
    Ubuntu CPython3.6:
      image: 'ubuntu-latest'
      python.version: '3.6'
      python.architecture: 'x64'
    Ubuntu CPython3.7:
      image: 'ubuntu-latest'
      python.version: '3.7'
      python.architecture: 'x64'
    Ubuntu CPython3.8:
      image: 'ubuntu-latest'
      python.version: '3.8'
      python.architecture: 'x64'
    Ubuntu CPython3.9:
      image: 'ubuntu-latest'
      python.version: '3.9'
      python.architecture: 'x64'
    Ubuntu PyPy3:
      image: 'ubuntu-latest'
      python.version: 'pypy3'
      python.architecture: 'x64'
    Windows CPython3.5 (x86):
      image: 'windows-latest'
      python.version: '3.5'
      python.architecture: 'x86'
    Windows CPython3.5 (x64):
      image: 'windows-latest'
      python.version: '3.5'
      python.architecture: 'x64'
    Windows CPython3.6 (x86):
      image: 'windows-latest'
      python.version: '3.6'
      python.architecture: 'x86'
    Windows CPython3.6 (x64):
      image: 'windows-latest'
      python.version: '3.6'
      python.architecture: 'x64'
    Windows CPython3.7 (x86):
      image: 'windows-latest'
      python.version: '3.7'
      python.architecture: 'x86'
    Windows CPython3.7 (x64):
      image: 'windows-latest'
      python.version: '3.7'
      python.architecture: 'x64'
    Windows CPython3.8 (x86):
      image: 'windows-latest'
      python.version: '3.8'
      python.architecture: 'x86'
    Windows CPython3.8 (x64):
      image: 'windows-latest'
      python.version: '3.8'
      python.architecture: 'x64'
    Windows CPython3.9 (x86):
      image: 'windows-latest'
      python.version: '3.9'
      python.architecture: 'x86'
    Windows CPython3.9 (x64):
      image: 'windows-latest'
      python.version: '3.9'
      python.architecture: 'x64'
    Windows PyPy3:
      image: 'windows-latest'
      python.version: 'pypy3'
      python.architecture: 'x86'

pool:
  vmImage: $(image)

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: '$(python.architecture)'
  - bash: python -m pip install --upgrade pip setuptools
    displayName: 'Install packaging tools'
  - bash: python -m pip install -r requirements.txt
    displayName: 'Install dependencies'
  - bash: python -m pip install --upgrade coverage codecov
    displayName: 'Install coverage dependencies'
  - bash: coverage run -m doctest README.md
    displayName: 'Run doctests'
  - bash: python -m pip install -r requirements-tests.txt
    displayName: 'Install tests dependencies'
  - bash: coverage run --append -m pytest
    displayName: 'Run tests'
  - bash: coverage xml
    displayName: 'Collect coverage'
  - bash: python -m codecov -f coverage.xml -X gcov --build "$AGENT_JOBNAME"
    condition: succeeded()
    displayName: 'Upload coverage'
    env:
      CODECOV_TOKEN: $(CODECOV_TOKEN)
  - bash: python -m pip install --upgrade wheel
    condition: and(succeeded(), eq(variables['python.version'], '3.5'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Install build dependencies'
  - bash: python setup.py sdist bdist_wheel
    condition: and(succeeded(), eq(variables['python.version'], '3.5'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Build'
  - bash: python -m pip install --upgrade twine
    condition: and(succeeded(), eq(variables['python.version'], '3.5'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Install deploy dependencies'
  - bash: twine upload --skip-existing dist/*
    condition: and(succeeded(), eq(variables['python.version'], '3.5'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Deploy'
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: $(TWINE_PASSWORD)
